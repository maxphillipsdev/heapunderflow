datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Comment       Comment[]
  Snippet       Snippet[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Snippet {
  id      Int    @id @default(autoincrement())
  title   String
  content String
  tags    Tag[]
  poster  User   @relation(fields: [userId], references: [id])

  userId String
}

model Comment {
  id      Int    @id @default(autoincrement())
  poster  User   @relation(fields: [userId], references: [id])
  content String
  userId  String
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  Snippet   Snippet? @relation(fields: [snippetId], references: [id])
  snippetId Int?
}
